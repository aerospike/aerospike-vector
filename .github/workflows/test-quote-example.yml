name: Run Quote Search Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: Quote Search Tests
    runs-on: ubuntu-latest

    env:
      WORKING_DIR: quote-semantic-search

    strategy:
      matrix:
        deployment: [waitress, docker, docker-preview]

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Install Python dependencies
      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r quote-search/requirements.txt
          pip install -r tests/requirements.txt

      # Write feature keys to config files for use by AVS and Aerospike
      - name: Write feature keys
        working-directory: docker
        env:
          FEATURES_CONF : ${{secrets.FEATURES_CONF}}

        run: |
          echo "$FEATURES_CONF" > config/features.conf

      # Run the AVS server with Docker Compose
      - name: Start AVS Server
        working-directory: docker
        run: |
          docker compose -f docker-compose.yaml up -d

      # Wait for the AVS Docker Container to be Healthy
      - name: Wait for Docker Container to Be Healthy
        run: |
          CONTAINER_NAME="aerospike-vector-search"
          while [ "$(docker inspect -f '{{.State.Health.Status}}' $CONTAINER_NAME)" != "healthy" ]; do
            echo "Waiting for container $CONTAINER_NAME to be healthy..."
            sleep 1
          done
          echo "Container $CONTAINER_NAME is healthy, continuing..."

      # Run the app server with waitress
      - name: Start Server with Waitress
        working-directory: ${{ env.WORKING_DIR }}/quote-search
        if: matrix.deployment == 'waitress'
        env:
          # By default, the docker compose in /docker maps the AVS_PORT from 5000 to 5555 on localhost
          AVS_PORT: 5555
        run: |
          nohup python -m waitress --host=127.0.0.1 --port=8080 --threads 32 quote_search:app &
          sleep 30 # Wait for the server to be ready
          # TODO come up with a better/faster way to wait for the server to be ready

      # Build and run Docker container
      - name: Build and Start app with Docker
        working-directory: ${{ env.WORKING_DIR }}
        if: matrix.deployment == 'docker'
        run: |
          docker build -t quote-search . -f Dockerfile-quote-search
          docker run -d -p 8080:8080 --name quote-search \
            --network svc \
            -e AVS_PORT=5000 \
            -e AVS_HOST=aerospike-vector-search \
            -v ./container-volumes/quote-search/data:/container-volumes/quote-search/data \
            quote-search
          sleep 60 # Wait for the server to be ready
          # TODO come up with a better/faster way to wait for the server to be ready

      # Build and run preview Docker container
      # The preview container copies the dataset so no volume is needed
      - name: Build and Start app with preview Docker image
        if: matrix.deployment == 'docker-preview'
        run: |
          docker build -t quote-search . -f .internal/Dockerfile-quote-search-preview
          docker run -d -p 8080:8080 --name quote-search \
            --network svc \
            -e AVS_PORT=5000 \
            -e AVS_HOST=aerospike-vector-search \
            quote-search
          sleep 60 # Wait for the server to be ready
          # TODO come up with a better/faster way to wait for the server to be ready

      # Run Pytest tests
      - name: Run Pytest
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pytest tests/e2e -s

      # Cleanup Docker container (only for Docker deployment)
      - name: Cleanup Docker
        if: matrix.deployment == 'docker' || matrix.deployment == 'docker-preview'
        run: |
          docker stop quote-search
          docker rm quote-search
