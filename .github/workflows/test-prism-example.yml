name: Run Prism Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  tests:
    name: Run Tests with Waitress and Docker Deployments
    runs-on: ubuntu-latest

    env:
      WORKING_DIR: prism-image-search

    strategy:
      matrix:
        deployment: [waitress, docker] # Define deployment strategies

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Install Python dependencies
      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r prism/requirements.txt
          pip install -r tests/requirements.txt

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Write feature keys to config files for use by AVS and Aerospike
      - name: Write feature keys
        working-directory: docker
        env:
          FEATURES_CONF : ${{secrets.FEATURES_CONF}}

        run: |
          echo "$FEATURES_CONF" > config/features.conf

      # Run the AVS server with Docker Compose
      - name: Start AVS Server
        working-directory: docker
        run: |
          docker-compose -f docker-compose.yaml up -d

      # Wait for the AVS Docker Container to be Healthy
      - name: Wait for Docker Container to Be Healthy
        run: |
          CONTAINER_NAME="aerospike-vector-search"
          while [ "$(docker inspect -f '{{.State.Health.Status}}' $CONTAINER_NAME)" != "healthy" ]; do
            echo "Waiting for container $CONTAINER_NAME to be healthy..."
            sleep 1
          done
          echo "Container $CONTAINER_NAME is healthy, continuing..."

      # Run the app server with waitress
      - name: Start Server with Waitress
        working-directory: ${{ env.WORKING_DIR }}/prism
        if: matrix.deployment == 'waitress'
        env:
          # By default, the docker compose in /docker maps the AVS_PORT from 5000 to 5555 on localhost
          AVS_PORT: 5555
        run: |
          nohup python -m waitress --host=127.0.0.1 --port=8080 --threads 32 prism:app &
          sleep 5 # Wait for the server to be ready

      # Build and run Docker container
      - name: Build and Start Server with Docker
        working-directory: ${{ env.WORKING_DIR }}
        if: matrix.deployment == 'docker'
        run: |
          docker build -t prism . -f Dockerfile-prism
          docker run -d -p 8080:8080 --name prism \
            --network svc \
            -e AVS_PORT=5000 \
            -e AVS_HOST=aerospike-vector-search \
            prism
          sleep 5 # Wait for the server to be ready

      # Run Pytest tests
      - name: Run Pytest
        run: |
          pytest tests/ -s

      # Cleanup Docker container (only for Docker deployment)
      - name: Cleanup Docker
        if: matrix.deployment == 'docker'
        run: |
          docker stop prism
          docker rm prism
